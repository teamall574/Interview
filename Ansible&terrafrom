>>vi anji.yml

---
-name: Install the nginx
 hosts: all # or single host add in host file then specify the host here
 become: true
 tasks:
 - name: install nginx
   yum:
     name: nginx
     state: latest
 - name: start nginx
   service:
     name: nginx
     state: start
     
:wq

>>ansible-playbook -i hosts anji.yml   --check

=====when commands

>>vi instal.yml

---
- name: install package
  hosts: all
  become: true
  tasks:
  - name: install package
    yum:
      name: httpd
      state: installed
    when: ansible_os_family == "RedHat"

  - name: start apache
    service:
      name: httpd
      state: started
    when: ansible_os_family == "RedHat"
 
  - name: install apace2
    apt:
      name: apach2
      state: present
    when: ansible_os_family == "Debain"
  
  - name: start apache2
    service:
      name: apache
      state: started
    when: ansible_os_family == "Debain"

:wq

>>ansible-playbook instal.yml

>>vi install.yml

---
- name: this will install multiple packegs
  hosts: all
  become: true
  tasks:
  - name: install package
    yum: 
      name: ['git', 'telnet', 'make', 'wget', 'gcc']
      state: installed
:wq

>>ansible-playbook install.yml

>>vi install.yml
---
- name: this will install multiple packegs
  hosts: all
  become: true
  tasks:
  - name: install package
    yum: 
      name: "{{item}}'
        state: installed
      with_items:
        - git
        - make
        - telnet
:wq

>>ansible-playbook install.yml
>>it will not execute why because it is deprected

=====variables

>>vi var.yml

---
- name: variables to see
  hosts: all
  become: true
  vars:
    user: john
  tasks:
  - name: creating user john
    user: 
      name: "{{ user }}"
:wq

>>ansible-playbook vars.yml   -->if anyone joined just change user: modi

>>vi user.yml
user: test
:wq

>>vi vars.yml
---
- name: this playbook to create user
  hosts: all
  become: true
  vars_files:
    - user.yml
  tasks:
  - name: creating user
    user:
      name: "{{ user }}"

:wq

>>ansible-playbook vars.yml       -->using the files also you can create the user

===install image outside

>>vi tom.yml

---
- name: setup tomcat
  hosts: all
  become: true
  tasks: 
  - name: install java
    yum:
      name: java
      state: installe
    when: ansible_os_family == "RedHat"
  - name: install java in ubuntu
    apt:
      name: default-jdk
      state: present
    when_os_family  == "Debain"
  - name: download tomcat server
    get_url:
      url: http://mirrors.estointernet.in/apache/tomcat/tomcat-8/v8.5.50/bin/apache-tomcat-8.5.50.tar.gz
      dest: /opt
  - name: untar apache packages
    unarchive:
      src: /opt/apache-tomcat-8.5.50.tar.gz
      dest: /opt
      remote_src: yes
  - name: add execution permissions
    file:
      path: /opt/apache-tomcat-8.5.50.tar.gz
      mode: 0777
  - name: start tomcat service
    shell: nohup ./startup.sh
    args:
      chdir: /opt/apache-tomcat-8.5.50/bin
:wq

>>ansible-playbook tom.yml  --check

===clone git private repo
>>vi cl.yml
---
- name: clone the repository
  become:true
  hosts: all
  tasks:
  - name: git clo
    git:
      repo: https://anji:anji1592@github.com/teamall574/yankils.git
      dest: /opt/ansadmin/test-vault
:wq

---
- hosts: localhost
  become: true
  tasks:
  - name: Copy file to S3 bucket
    s3: 
      aws_access_key=<AccessKey> 
      aws_secret_key=<Secret Key> 
      bucket=example 
      object=/niru.txt 
      src=/home/ansible/example.txt 
      mode=put

      ---
- hosts: all
  tasks:
    - name: find all files that are older than 10 days
      find:
        paths: /data/log
        age: 10d
        recurse: yes
      register: filesOlderThan10
    - name: remove older than 10
      file:
        path: "{{ item.path }}" 
        state: absent
      with_items: "{{ filesOlderThan10.files }}"

how to write playbook to allow te firewall ports in ansible playbook

vi test.yml 
---
- name: Firewall rules
  hosts: localhost
  remote_user: anji
  become: yes
  tasks:
  - name: web Access Firewall rule
    firewalld:
      zone: public
      service: https
      port: 8081/tcp
      permanent: yes
      state: enabled
  - name: reload firewalld service
    service:
      name: firewalld
      state: restarted
:wq

>>ansible-playbook test.yml  --syntax-Check
>>ansible-playbook test.yml 

---
- name: Monitor disk space, memory, and CPU usage and send Slack notification
  hosts: localhost
  gather_facts: true

  tasks:
    - name: Check disk space
      shell: df -h
      register: disk_space_output

    - name: Check memory usage
      shell: free -h
      register: memory_output

    - name: Check CPU usage
      shell: top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}'
      register: cpu_output

    - name: Send Slack notification
      uri:
        url: "https://hooks.slack.com/services/YOUR_SLACK_WEBHOOK_URL"
        method: POST
        body_format: json
        body: >
          {
            "text": "System Monitoring Report:\n\nDisk Space Usage:\n{{ disk_space_output.stdout }}\n\nMemory Usage:\n{{ memory_output.stdout }}\n\nCPU Usage:\n{{ cpu_output.stdout }}"
          }

vi script.sh 
HOSTNAME=$(hostname)
DATE=$(date "+%d-%m-%Y %H:%M:%S")
SYSTEMLOAD=$(uptime | awk '{print $9,$10,$11}')
CPULOAD=$(top -b -n 2 -d1 | grep "CPU(s)" | tail -n1 | awk '{print $2}')
MEMORYUSAGE=$(free -m | grep Mem: | tail -n1 | awk '{print $2,$3}')
DISKUSAGE=$(df -p | colum -t | awk '{print $5}' | tail -n 1 | sed 's/%//g')
:wq
---
- name: Execute script file on all servers
  hosts: your_target_hosts
  become: true  # If you need root/sudo privileges to execute the script
  tasks:
    - name: Execute script
      script: /path/to/script.sh
---
- name: creating users and groups and ssh connection
  hosts: "*" #all is possible
  become: yes
  tasks:
   - user:
      name: "{{ item }}"
      state: present
     loop:
      - name1
      - name2
      - name3
      - name4     
   - group:
      name: "{{ item }}"
      state: present
     loop:
      - group1
      - group2

   - ansible.builtin.user:
      name: name1
      shell: /bin/bash
      groups: group1,group2
      append: yes
      
   - ansible.builtin.user:
      name: name2
      shell: /bin/bash
      groups: group2
      append: yes

   - authorized_key:
       user: name1
       state: present
       key: "{{ lookup('file', './user_id_rsa.pub') }}"

   - authorized_key:
       user: name2
       state: present
       key: "{{ lookup('file', './user_id_rsa.pub') }}"

>>ansible-playbook cl.yml 

===Ad-hoc commands
>>ansible all -m ping.   -->ping the server
>>ansible webservers -m service -a "name=apache2 state=stopped" -b.        -->stop a service immediately on all web servers due to an ongoing security incident
>>ansible all -m setup.       -->to gather information about the servers
>>ansible webservers -m copy -a "src=/etc/hosts dest=/tmp/hosts" -b.     -->copy a file to a group of servers
>>ansible all -m file -a "path=/path/to/directory state=directory" -b.     -->quickly create a directory on all your servers
>>ansible webservers -m apt -a "name=nginx state=present" -b.     -->install a package on a group of servers
>>ansible webservers -m shell -a "ls -l /var/www/html" -b.      -->execute a shell command on all servers
>>ansible webservers -m file -a "path=/var/www/html/index.html mode=0644" -b               -->command to change file permissions on all servers in a group
>>ansible webservers -m user -a "name=john state=present" -b.      -->command to add a user to a group of servers
>>ansible webservers -m service -a "name=apache2 state=started" -b.   -->start a service on all servers in a group
>>ansible webservers -m apt -a "upgrade=dist" -b.            -->update all packages on your servers
>>ansible demo -a "sudo yum install httpd -y"   -->it will install the httpd server in the nodes
>>ansible demo --list-hosts       -->it will show the nodes or hosts
>>ansible demo -b -m yum -a "pkg=httpd state=present"   -->it will install the httpd
>>ansible demo -b -m service -a "name=httpd state=started"   -->it will start the httpd
>>ansible demo -b -m user -a "name=sampi"   -->it will create the user in all the nodes
>>ansible demo[-1] -b -m copy -a "src=copiedfile dest=/tmp"  -->it will copy the file from server to nodes 
>>ansible webservers -m command -a "cat /path/to/file".     -->to check the contents of a file on multiple servers,
>>ansible all -m command -a "uptime".    -->to check uptime 
>>ansible all -m sysctl -a "name=net.core.somaxconn value=1024 state=present reload=yes" -b.    -->change the kernel parameters on your servers without a reboot
>>ansible all -m reboot -b.    -->reboot all servers in your inventory
>>ansible all -m command -a "df -h"     -->check the disk usage on all servers.  
>>ansible all -m fetch -a "src=/var/log/syslog dest=/tmp/logs/" -b.   -->fetch a log file from multiple servers for debugging an issue
>>ansible webservers -m file -a "path=/var/www/html/index.html owner=www-data" -b.   -->change the owner of a file on all servers in a group
>>ansible webservers -m user -a "name=john state=absent" -b.  -->create a user
>>ansible webservers -m command -a "grep -r 'text_to_find' /path/to/directory".   -->find all instances of a specific text in a directory on a remote server,
>>ansible all -m lineinfile -a "path=/etc/hosts line='192.168.1.10 myhost' state=present" -b.    -->you need to add an entry to the hosts file on all servers in your inventory
>>ansible webservers -m cron -a "name='daily script' minute=0 hour=5 job='/path/to/script.sh' state=present" -b.     -->create a cron job on all servers in a group
>>ansible all -m service -a "name=nginx enabled=yes" -b.     -->command to enable a system service to start at boot on all servers
>>ansible all -m selinux -a "state=permissive" -b.     -->change the SELinux state on all servers in your inventory
>>ansible webservers -m apt_repository -a "repo='ppa:nginx/stable' state=present" -b.        -->need to add a repository on all your Ubuntu servers
>>ansible webservers -m user -a "name=john password_lock=yes" -b.           -->command to lock a user account on all servers in a group
>>ansible loadbalancers -m command -a "mv /etc/nginx/conf.d/upstream.conf /etc/nginx/conf.d/upstream.conf.bak && service nginx reload" -b.   -->quickly drain all connections from your load balancer for maintenance
>>ansible all -m mdadm -a "devices=['/dev/sda', '/dev/sdb'] level=raid1 name=my_raid state=present" -b.       -->create a RAID array on your servers
>>ansible webservers -m mount -a "path=/mnt/data state=unmounted" -b.         -->unmount a filesystem on all servers in a group using an ad-hoc command
>>ansible all -m command -a "date --set='2024-12-31 23:59'" -b.       -->change the date and time on all servers
>>ansible all -m lineinfile -a "path=/etc/ssh/sshd_config regexp='^PasswordAuthentication' line='PasswordAuthentication no' state=present" -b 
and then restart the sshd service: ansible all -m service -a "name=sshd state=restarted" -b.       -->disable password authentication on all your servers
>>ansible all -m command -a "top -b -n 1".       -->monitor real-time system performance
>>ansible webservers -m command -a "ps aux --sort=-%mem | head -n 2".      -->find the process using the most memory on all servers in a group
>>ansible all -m wait_for -a "host=localhost port=80 timeout=1"   -->verify that a specific TCP port is open on all servers  This will attempt to connect to port 80 on each server and report an error if it fails.







 
   


==================================================================Ansible===============================================================================

what is Ansible

>>Ansible is an open-source automation tool. and it follows push mechansim
>>Ansible is Idempotent
>>Ansible is an open-source software provisioning configuartion management and application deployment tool
>>Ansible is used for managing multiple servers in the infrastructure
>>it is very very simple to setup and yet powerful tool
>>Ansible will be helpful to perform:-
configuration management
application deployment
task automation
and also it orchestration

2-why Ansible why not puppet or chef

>>it is a free open-source automation tool
>>using existing openssh
>>agentless-no need to install any agent on ansible on clients
>>it uses yaml 
>>and it follows push mechansim
>>large number of ready to use modules for system management
>>custom modules can be added if needed

3-what is pre-requisites for Ansible

>>python adn pip
>>pip install ansible
>>windows dont support cluster/control node only linux support

4-how many ways create connection between managed to node/cluster to clients or worker nodes

>>two ways to create the ssh connection 
1-password authentication
2-password less authentication(this is with ssh keys)

5-what is Ansible home directory and which consists of

>>/etc/ansible
consist of
1-ansibel.cfg
2-hosts
3-roles

6-what is Inventory file

>>the collection of hosts is know as Ansible Inventory
>>The Ansible Inventory file defines the list of hosts upon which anisble works
>>The Inventory is a description of the nodes (can be a single machine, group of machines or even remote systems) that can be accessed by Ansible.
>>The Ansible inventory file defines the hosts and groups of hosts upon which commands, modules, and tasks in a playbook operate. The file can be in one of 
many formats depending on your Ansible environment and plugins. Common formats include INI and YAML.

7-how many types of invnetory files

Two types
1-static:-
>>This is a static file managed by the ansible operators. This file has a list of devices that can be in the form of IP addresses or hostnames.
2-Dynamic:-you are creating the file and giving the path
A dynamic inventory plugin allows users to point at data sources to compile the inventory of hosts that Ansible uses to target tasks, 
either via the -i /path/to/file and/or -i 'host1, host2' command line parameters or from other configuration sources.
Dynamic inventory is used when the targets are not known until the playbook run time. It can be based on a script, API call, or cloud providers.

8-What is host key checking?

>>In host key checking, ssh automatically maintains and checks a database containing identification for all hosts it has ever been used with. 
Host keys are stored in ~/. ssh/known_hosts in the user's home directory. Additionally, the /etc/ssh/ssh_known_hosts file is automatically checked for known hosts.

>>when you not copyied your ssh keys into worker node .and your accessing the node using ssh it will ask yes or no this called host key checking

9-how to disable host key checking

>>vi /etc/ansible/ansible.cfg
host_key-checking= false
exit
>>this temporary
export host_key_checking= false ## if the system restarts automatically wipeed up 

10-how you will manage your ansible

>>no of devops engineer working together that reason i just created my own folder copied that files into that folder and changed inventory path location so
we can your configuartion easily because you will confuse with the other servers also
>>mkdir ansible_prod
>>cd ansible_prod
>>cp -r /etc/ansible/*  . 
it will copy that files you can change your config hosts and everything 

11-what is group in inventory files

>>dividing hosts into specific group easy to manage the servers
[web-servers]
10.24.25.45
10.24.25.56
[db-servers]
10.24.25.36
10.24.25.37
[app-servers]
10.24.25.46
10.24.25.65

>>ansible all -m ping ##it will ping all servers even your created group but you can use the all means it will ping all ips of your groups

12-what is ansible.cfg file in ansible

>>ansible.cfg file is simple ansible configuration file you can o some setting in ansible.cfg thoe settings will use by ansible while running ad-hoc commadns 
are playbooks or modules
settings like
>>location of inventory file
>>host_key_checking 
>>forks=5

vi /etc/ansible.ansible..cfg  -->this is the path location

13-what is Adhoc commands

>>Ansible commands are useful to execute one task to your remote node or nodes or groups. Ad-hoc commands are quick and easy, but they are not re-usable and there
is no idempotant in Ad-hoc commnads. Ad-hoc commands are like one-line playbooks to perform a specific task only. The syntax for the ad-hoc command is
>>Ad hoc commands are simple, standalone, one-liner ansible commands which are used for quick tasks where writing a playbook could be an overkill.

14-what is Ansible playbook

>>playbooks are nothing but whatever the individual task your going to execute your going to get with adhoc commands those adhoc commands going to written 
in a playbook
>>Ansible Playbooks are sets of 'plays' or 'tasks' used to define automation jobs in Ansible, they are written in YAML format.
>>Ansible Playbooks are lists of tasks that automatically execute against hosts. Groups of hosts form your Ansible inventory. 
>>ansible is text file written in yaml format and normal saved as .yaml

15- What exactly is a configuration management tool?

>>Configuartion management is tool is a helps adminstarotrs to mainstain system consistency and it is known as configuartion neforcemnt. it is used to deploy
your software packages and applications adn updates and patches and installtion and deploymeny
>>>>Configuration management tools help keep a system running within the desired parameters. They help reduce deployment time and substantially 
reduce the effort required to perform repetitive tasks. Popular configuration management tools on the market today include Chef, Puppet, Salt, 
and of course, Ansible.

16-what is Ansible modules

>>module is nothing pre-defined program that program is able to execute is task on your managed nodes .A module is a reusable, standalone script that Ansible 
runs on your behalf, either locally or remotely. Modules interact with your local machine, an API,or a remote system to perform specific tasks like 
changing a database password or spinning up a cloud instance.

>>creating users
>>installing packages
>>updating configuartion
>>spinning up instances etc

17-how many modules is ther in ansible 

>>ansible-doc -l | wc -l  --->it will show the list
>>2834

18-types of modules in ansible

1-yum
2-apt
3-copy
4-service
5-file
6-template
7-git
8-command
9-debug
10-ping
11-fetch
12-patch
13-stat
14-unarchive
15-get_url
16-tasks
17-raw
18-user

19-what is ansible forks

>>if you have ten servers in host file, but ansible forks it will run first 5hosts and then execute next 5hosts. it will run only 5hosts
Ansible uses batches for task execution, which are controlled by a parameter called forks . The default value for forks is 5, which means Ansible executes a
task on the first five hosts, waits for the task to complete, and then takes the next batch of five hosts, and so on

20-what is gather facts

>>gather-facts is equal to setup command nothing but its going to pull the target system related information this is the default task every playbook

>>we can restrict the gather_facts why means if you have 100 servers it will collect all the its take ongtime thats why we can restrict if necessary
>>ansible all -m setup         -->it will show all the gather_facts 
>>vi te.yml
---
- name: this playbook create a file or dir
  hosts: all
  become: true
  gather_facts: no
  tasks:
  - name: creating a file
    file:
      path: /home/ansadmin/dir1
      state: directory
:wq

>>ansible-playbook te.yml

>>this will help you

21-what is Anisble facts or gather facts

>>the task of collecting the remote system information is called gather_facts. Yes, we can create custom facts using the set_fact module or using local scripts.
>>Ansible facts are nothing but information about managed nodes like OS distribution,release, processor, python etc
>>by executing the playbook or adhoc commands automatically collect the facts it will take some time if you have 100 servers that 100 servers facts will collect 
the data it will take the time so you can disable the facts

>>ansible all -m setup         -->it will show all the gather_facts 
>>vi te.yml
---
- name: this playbook create a file or dir
  hosts: all
  become: true
  gather_facts: no
  tasks:
  - name: creating a file
    file:
      path: /home/ansadmin/dir1
      state: directory
:wq

>>ansible-playbook te.yml

22-types of ansible facts

>>there are two types of ansible facts or variable
1-default-facts:-by default you will you cant modify
2-custom-facts:-you can modify the facts custom you want

23-why we need custom facts

>>you can create you custom scripts are playbook you can reducce the number of lines
your having number of servers you ant take inventory like versions are git version,httpd version you can customize the facts waht you want you can create 

24-what is raw module

>>raw: executes low-level commands where the interpreter is missing on the target host, a common use case is for installing python. This module should not be used 
in all other cases (where command and shell are suggested)

25-what is ansible varibales

>>ansible variables are used to store the values
>>types of variables
1-default variables:-
Ansible defines some variables for us and these are very helpful
1-inventory_hostname
2-inventory_hostname_short
3-group/group.keys()
2-inventory variables(host & groups)
3-register variables

26-why we need to use the playbooks in ansible

>>ad-hoc commands are not helpful when dealing with multiple tasks 
>>if you want install multiple packages you need to run number of commands so that reason we can use playbookwe can install or deploy number of tasks easy way in 
single playbook 

27-what is ignore errors in ansible

>>if your running a playbook in differnet servers install the packages but 25 server package is not installed then after remaing servers will not execute the task
if we add the ignore errors then if 25 server failed then it will continue and install reaing system or servers

28-What language does Ansible use?

>>Python
>>Ansible is a tool written in Python, and it uses the declarative markup language YAML to describe the desired state of devices and configuration

29-structure of playbook

>>concepts:-
1-task
2-play
3-playbook

30-what is data structure or data collections

>>data structure or data collections are used to store multiple values

31-what is the difference between Ansible and chef

>>Another key distinction is that Ansible uses YAML, a Python-based configuration language that is easier to learn and oriented to administrators, whereas Chef 
uses Ruby, a Domain Specific Language (DSL) that is oriented to developers and has a steeper learning curve
>>Cookbooks vs. Playbooks: So what’s this all about? Ansible’s playbooks are easier to grasp as a concept as well as to create, but you pay for that with the 
limitation on how complex you can make your configuration tasks.

32-what is command line arguments in ansible

>>command line arguments are useful to pass variables from command line

33-what is handler and notify

>>•	Handlers are just like regular tasks but run only when notified by another task. They are used to manage services like restarting a service when a config file changes.
>>lets assume that you have two tasks and you want execute the second task if the first task is chnaged. simplelly if the first task is changed then execute the second task
>>handlers are basically similar to the normal tasks in ansible but they only run when a task contains notify directive lets assume that you have basic task 
in your ansible for example for creation of an nginx your installing httpd or nginx so the next step is basically start the service so in some cases you only
want to start on conditional basis you can use this directive called notify and this notify would call the task that you create din the handler and that gets 
called its basically calling whenever it is required 

34-what is tags in ansible

>>tags are useful to execute/skip required tasks from number of tasks

35-what is ansible import and include

>>Ansible has two modes of operation for reusable content with Including and Importing and Roles: dynamic and static. The main difference is: All import* statements
are pre-processed at the time playbooks are parsed. All include* statements are processed as they encountered during the execution of the playbook
>>all import statements are pre-processed at the time playbooks are parsed
>>all include statements are processed at they encountered during the execution of the playbooks

36-what is template Module

>>A template is a file that contains all your configuration parameters, but the dynamic values are given as variables in the Ansible. During the playbook execution,
it depends on the conditions such as which cluster you are using, and the variables will be replaced with the relevant values.

37-What is Ansible Vault?

>>ansible vault is feature of ansible that allows you to keep sensitive data such as passwords or keys in encrypted files
rather than as plaintext in playbooks or roles
>>Ansible vault is used to keep sensitive data such as passwords instead of placing it as plaintext in playbooks or roles. 
Any structured data file or any single value inside the YAML file can be encrypted by Ansible.

>>ansible-vault craete encrypt install.yml
it will ask password create the password anji
>>ansible-vault view install.yml
it will ask the password anji
>>ansible-vault edit install.yml
it will ask the password anji    -->you can edit the data

>>ansible-vault encrypt foo.yml bar.yml baz.yml
>>ansible-vault decrypt foo.yml bar.yml baz.yml

38-Do you think Ansible is better than other configuration management tools? if yes why

>>basically there is lot of configuration management tools available in the market so justify ansible is better ansible is differnet from other 
configuration management tools and it is better in acheving a specific use case Ansible is agentless 

39-I would like to run a specific set of tasks only on windows VMS and not linux VMS is it possible

>>yes using tags or conditional basis scripts

40-Does Ansible support Parallel execution of tasks 

>>if assigning 10 tasks in 5 server it will 1 task then run in 5 servers then it will execute the second task 

41--what is the protocol that Ansible uses to connect the Windows VMs

>>Ansible uses Winrm to connect Windows and ssh to connect the Linux

42-how do you handle secrets in Ansible

>>Ansible vault store all your secrets in an encrypted way

43-can we Ansible is IAC > Infrastructure as a code? If yes can you compare with any other IAC tools like Terraform

>>Ansible also supports IAC I will not say Infrastructure as a code tool because predominantly Ansible is a configuration management tool there is a 
cross pf paths ansible also achieve some of the tasks that Terrfform can do but I would say Ansible is configuartion management tool

44-what do you think that Ansible can improve

>>Ansible curreently not provide option to increase the verbosity of teh tasks like can improve is that aspects it can provide verbosity on the task basic uh 
this is one of the most liked issue

>>Ansible windows support can be improved we all know that ansible supports windows but the support for linux is much better than winodws and windows support
can be need to improve

45-What language does Ansible use?

>>Python
>>Ansible is a tool written in Python, and it uses the declarative markup language YAML to describe the desired state of devices and configuration

46-what is Roles

>>In Ansible, the role is the primary mechanism for breaking a playbook into multiple files. This simplifies writing complex playbooks, and it makes them easier
to reuse. The breaking of playbook allows you to logically break the playbook into reusable components.
>>you have multiple tasks and handlers and varibles files you can specfiy the code into differnt files and then you can write the file below
>>role is an independent block of tasks, files, templates, and variables, which can be used to automatically load certain vars_files, tasks, and handlers based on a known file structure.

>>ansible-galaxy init anji
>>cd anji
>>ls
-tasks:-contains the main list of taks
-handlers:-contains handlers which may be used by this role
-defaults:-defaults variables for the role
-vars:- other variables for the role
-files:- contains files which can be deployed via this role
-templates:- contains templates which can be deployed in this role
-meta:-defines some meta data for this role

>>vi roles.yml
---
- name: using roles
  hosts: all
  become: true
  roles: 
    - anji
 :wq
 
 >>ansible-playbook roles.yml         -->in anji role we divide the code belwo you can 
>>cd anji
>>vi vars/main.yml
  - name: install package
    yum: 
      name: httpd
      state: installed
    when: ansible_os_family == "RedHat"
    notify: start apache
  - name: install apache2
    apt:
      name: apache2
      state: present
    when: ansible_os_family == "Debian"
  - name: ensure the default apache port is 8081
    lineinfile:
      path: /etc/httpd/conf/httpd.conf
      regexp: '^Listen'
      insertafter: '^#Listen'
      line: Listen 8081
    when: ansible_os_family == "RedHat"
    notify: restart apache

  - name: ensure the default apache port is 8081 on ubuntu
    lineinfile: 
      path: /etc/apache2/ports.conf
      regexp: '^Listen'
      insertafter: '^#Listen'
      line: Listen 8081
    when: ansible_os_family == "Debian"
    notify: restart apache2
:wq
>>vi handlers/main.yml
  handlers:
  - name: start apache
    service:
      name: httpd
      state: started
  - name: start apache2
    service:
      name: apache2
      state: started
  - name: restart apache
    service: 
      name: httpd
      state: restarted

  - name: restart apache2
    service: 
      name: apache2
      state: restarted

:wq
>>thats it if you many more you divide accroding to that
>>you can push your code in to github 
>>vi /etc/httpd/conf/httpd.conf                 -->you can change your port number rhel
>>vi /etc/apache2/ports.conf

46-Is Ansible mutable or immutable

>>Mutable>>A mutable object can be changed after it's created, and an immutable object can't.

47-What is the Ansible Galaxy?

>>Ansible Galaxy is a shared repository for Ansible roles. Users can use Galaxy to share roles, and to use roles created by other users.

48-What is idempotency in Ansible?

>>Idempotency means that operations in Ansible can be run multiple times without changing the result after the first successful run.

49-Explain the Ansible architecture.

>>Ansible's architecture is straightforward, it interacts with managed nodes through the ansible program that is installed on the control node. The connection can be either using SSH (default) or 
other protocols.

50-What is Ansible Tower?

>>Ansible Tower is Ansible's enterprise-level product for centralized and controlled IT automation.

51-What is an Ansible task?

>>A task is a block of code inside a playbook which calls an Ansible module.

52-How do you manage different environments in Ansible?

>>You can manage different environments by using separate inventory files or separate directories per environment.

53-What is a check mode in Ansible?

>>The check mode (also called dry run) is used for testing playbooks without making any changes on the remote host.

54-What is Jinja2 in Ansible?

>>Jinja2 is a templating engine for Python, which is used in Ansible for manipulating variables.

55-What are the limitations of Ansible?

>>Ansible can be slower due to its push-based architecture, it is not suitable for real-time data processing, and the documentation might not cover all use-cases.

56-How do you organize playbooks for different environments?

>>Different environments can be handled using separate inventory files or using group_vars and host_vars directories.

57-How do you use Ansible for continuous deployment or continuous delivery?

>>Ansible can be used for continuous deployment or delivery by automating tasks and using Ansible Tower/AWX for orchestration.

58-How do you debug an Ansible Playbook?

>>Ansible playbook can be debugged using the debug module, verbosity flags like -v, -vv, -vvv, or using the ansible-playbook --step and --list-tasks commands.

59-How do you optimize the performance of Ansible in large environments?

>>Performance can be optimized using strategies like "free" or "fastest", pipelining, fact caching, and controlling the number of forks.

60-Explain the difference between 'include' and 'import' in Ansible.

>>'import' is static and is executed when the playbook is loaded. 'include' is dynamic and is executed during the runtime.

61-How do you create custom Ansible modules?

>>Custom Ansible modules can be created in any language that can return JSON, though they are usually written in Python.

62-How do you use Ansible for network automation?

>>Ansible can be used for network automation by using modules specifically designed for networking devices. It can automate tasks like configuration management, test and validate the current network state, etc.

63-What are lookup plugins in Ansible?

>>Lookup plugins are used to retrieve data from outside sources such as files, databases, or other systems.

64-How do you handle backends with varying capabilities in Ansible?

>>You can handle backends with varying capabilities using conditional tasks based on the gathered facts or variables.

65-What is the 'async' mode in Ansible?

>>'async' mode allows a task to continue in the background while the playbook continues executing the next tasks.

66-What are some of the strategies in Ansible?

>>Strategies control the order of task execution. Some of them are linear, debug, and free strategies.

67-What is the purpose of the 'delegate_to' keyword in Ansible?

>>'delegate_to' allows you to perform a task on a host other than the current one in the playbook.

68-How do you test your Ansible roles?

>>Ansible roles can be tested using tools such as Molecule, ansible-lint, or using CI/CD pipelines.

69-What is magic variable in Ansible?

>>Magic variables in Ansible are special variables that have a predefined meaning in Ansible. Some of them include hostvars, group_names, groups, and others.

70-How do you manage rolling updates with Ansible?

>>Ansible can manage rolling updates with the 'serial' keyword in playbooks, which allows you to define how many hosts you want to manage at a time.

71-Can Ansible use APIs for automation? How?

>>Yes, Ansible can use APIs for automation. This can be achieved by using the URI module in Ansible, which can interact with a lot of different APIs.

72- How would you handle a situation where you needed to manage a large number of hosts in Ansible? What strategies might you use?

>>With Ansible, managing a large number of hosts can be effectively done through a well-structured inventory file, utilizing host groups, and using variables for configuration settings. 
This makes it easier to manage configurations across all systems or across a group of systems.

73- Can you describe a scenario in which you would use Ansible handlers?

>>Handlers are tasks that only run when notified by another task. They're useful in scenarios where you want to minimize the number of actions performed. For instance, if you're updating a configuration
file for a service, you might use a handler to restart that service - but the handler will only run if the configuration file actually changed.

74-If an Ansible playbook fails in the middle, what steps would you take to debug it?

>>Ansible provides a --step and --start-at-task debugging facility that can be used to debug playbooks. You can also increase the verbosity of the Ansible command using the -v options to understand what
went wrong.

75-In what scenario would you choose to use a template in Ansible? Can you provide an example?

>>Templates in Ansible are useful when you want to dynamically generate configuration files based on variables. For example, if you are deploying a web server to different environments
(like staging and production), you might use a template for the server's configuration file, with variables for settings that change between environments.

76-Suppose you have a playbook that deploys a multi-tier application. How could you structure this playbook to ensure the database is set up before the application server?

>>You can use different plays within the same playbook to orchestrate this kind of multi-tier setup. The first play would target the database servers and contain tasks to set up the database. 
The second play would target the application servers and contain tasks to deploy the application, and it would only start once the first play has completed.

77-How would you test an Ansible playbook before running it on production servers?

>>You could use tools like Vagrant or Docker to create a local environment that matches your production environment as closely as possible, and then run your playbooks against that. 
You might also use ansible- playbook --check to do a "dry run" of the playbook. Ansible Molecule is also a popular tool for testing Ansible roles.

78-Describe a scenario where using ansible-pull might be more appropriate than the usual ansible or ansible-playbook commands.

>>ansible-pull is useful in a scenario where the managed nodes are not always online or reachable. For example, laptops that are part of a roaming workforce could use ansible-pull to apply configurations
whenever they're online, rather than having to be reachable by the control node at all times.

79-Suppose you've written a task that installs a package using the apt module, but it fails when you run the playbook on a CentOS server. What's wrong, and how would you fix it?

>>The apt module is specific to Debian-based systems, so it will fail on a CentOS server which is based on Red Hat and uses yum or dnf. You could either use the package module which is generic,
or add a condition to your task to use apt or yum depending on the system.

80-Can you describe a scenario where it might be helpful to define your own custom module in Ansible, rather than using the pre-existing ones?

>>Custom modules can be useful when there's no existing module that performs the function you need, or when existing modules don't provide enough control or flexibility. 
For example, you might write a custom module to interact with an internal or proprietary API in your organization.

81-How would you handle a situation where you needed to deploy an application that consists of multiple microservices with Ansible?

>>For deploying an application with multiple microservices, you can use Ansible roles. Each role encapsulates a specific functionality or microservice, and then in your main playbook, you can call each role.
This makes the deployment more manageable and modular.

82-In what scenario would you choose to use a static inventory over a dynamic one in Ansible?

>>If your infrastructure is relatively stable and doesn't change frequently, a static inventory can be simpler and easier to manage. A dynamic inventory is more useful when you're working with 
cloud-based infrastructure that can change frequently.

83-How can Ansible be used to automate system updates and patches?

>>You can write an Ansible playbook that uses the yum or apt module to update packages on your servers. This playbook could be run manually when needed, or scheduled to run 
regularly using cron or another job scheduler.

84-Can you describe a scenario where you would need to use loops in an Ansible playbook?

>>Loops in Ansible can be used to perform the same action on multiple items. For example, you might use a loop to install a list of packages, create multiple users, or make multiple configuration changes.

85-Suppose you want to create a symlink on a group of servers. How can you achieve this using an ad-hoc command?

>>To create a symlink, you can use the file module in an ad-hoc command with state=link. For example: ansible webservers -m file -a "src=/path/to/file dest=/path/to/symlink state=link" -b.

86-How would you use an ad-hoc command to check the uptime of all servers in your inventory?

>>You can use the command module to execute the uptime command on all servers. The command would be: ansible all -m command -a "uptime".

87-



















