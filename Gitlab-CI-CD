##on runner system need to install the maven and docker also if not installing it will not work
Image: "abhishekf5/maven-abhishek-docker-agent:v1" #this used as docker agent no need to install maven in your ec2 it will execute the maven commands

variables:
  SONAR_HOST_URL: https://34.203.223.11.9000
  SONAR: ${SONAR_LOGIN}
  SLACK_CHANNEL: ${slack-token}

before_script:
  - cd java-maven-sonar/spring-boot-app   ##if your project inside the directory you can use like this before executing your script

Stages:
  - compile
  - Sonarqube-analysis
  - build
  - image
  - deploy
Compile-job:
  stage: compile
  tags: 
    - "self-hosted"
  script:
    - echo "compiling code"
    - mvn clean package
sonarqube-job:
  stage: sonarqube-analysis
  script:
    - echo "Running sonarqube Analysis"
    - mvn sonar:sonar -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_LOGIN}
  artifacts:
    paths:
      - target/*.war
    - mvn deploy -Dmaven.deploy.skip=true -Dmaven.artifact.threads=2 ##or else you can setting.xml username and password and add pom.xml in url pass variables
    only:
      - master
build-job:
  stage: build
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean install
deploy-job:
  stage: image
  image: docker:stable
  services:
    - docker:dind
  tags:
    - "self-hosted"   ##runner name label what you given"
  script:
    - echo "buidl docker image and push"
    - docker build -t kubetest .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker tag kubetest $DOCKER_USERNAME/kubetest:latest
    - docker push anji1592/kubetest:latest
deploy-image:
  stage: deploy
  tags:
    - "self-hosted"   ##runner name label what you given"
  scripts:
    - kubectl create -f anji.yml
    - kubectl create -f service.yml
  only:
   - master
send_slack_notification:
  stage: build
  script:  ##need to add slack your token in SLACK_WEBHOOK_URL
    - 'curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Build is successful for project: $CI_PROJECT_NAME\"}" $SLACK_WEBHOOK_URL'
  only:
    - master  # Change this to a branch or tag that you want to trigger the notification
  when: on_success




1-What is Gitlab

>>GitLab is a web tool to assist with visualizing and managing your git projects. GitLab includes Git repository management, code reviews, issue tracking, wikis, and more. Collaborate with your team using issues, milestones, and line-by-line code review or view activity streams of projects or the people you work with.

>>Git and GitLab are here to help with managing projects, merging development between different people, with different time zones, and giving Sealed Air the ability to manage all of its source code in 1 location.

2-When Should I Consider Gitlab?

>>Version control software, like Git, allows you to have “versions” of a project, which show the changes that were made to code, or text files, over time, and allows you to backtrack if necessary and undo those changes or merge your code with others, line by line.

3-Is it possible to Host the Gitlab in local environment

>>You should manually download the GitLab package and relevant dependencies using a server of the same operating system type that has access to the Internet. If your offline environment has no local network access, you must manually transport the relevant package through physical media, such as a USB drive.

4-What is the minimum RAM for GitLab?

>>Memory. You need at least 2GB of addressable memory (RAM + swap) to install and use GitLab! With less memory GitLab will give strange errors during the reconfigure run and 500 errors during usage. 512MB RAM + 1.5GB of swap is the absolute minimum but we strongly advise against this amount of memory.

5-Disadvantages of Gitlab

>>Even if GitLab is simple to use, it’s a big piece of software that can sometimes become slow on the web user interface. Moreover, the review system is sometimes not so easy to use compared to other competitors.

6-What is GitLab used for?

>>GitLab is a management platform for Git repositories that provides integrated features like continuous integration, issue tracking, team support, and wiki documentation.

7-Advantages of Gitlab

>>The significant advantage of GitLab is it is available for free and easy to manage and configure it. it enables only a limited number of private repository, integrate several API and third-party server and consume only a reliable uptime. The code reviews and pulls up requests made it more compact and user-friendly.
1-Manage
2-plan
3-Create
4-Verfiry
5-package
6-Secure
7-Release
8-Configure
9-montior

8-What is Gitlab Runner

>>Gitlab Runner is an application that pick up and execute CI?CD jobs for Gitlab
>>Gitlab Runner is open-source
>>there are two types
1-Specific Runners(this will host by you)
2-Shared Runners(this will provide by gitlab)
>>you can install Gitlab Runner on several different supported operating systems&also can run inside Docker container

9-what is the Advantages of Docker Exectors or Docker Agents

>>if your using docker agents 
1-secuirty
2-configuration no need to configuration in all the systems everytime it is in light-weight in nature multiple pipelines parallel
3-you can run hundred of jobs using docker agents

10-how to secure the password and tokens in gitlab

>>there is option in settings under variables add your username or password or API-Tokens

11-Is it possible to do multiple jobs in a single stage

>>yes you can do 
build-job1:
  stage: build
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean package
build-job2:
  stage: build
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean install

12-Is it possible to do jobs running in parellel

>>yes you can do that by using this 
build-job:
  stage: build
  parallel: 10
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean install

13-How to speeding up build or pipeline

>>using cache to speedup the build or pipeline
build-job:
  stage: build
  cache:
    key: $(CI_COOMIT_REF_SLUG)
    paths:
    - nodes_modules/  ##it is job level only
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean install

14-Is it possible to copy artifacts into gitlab

>>yes it possible see below

build-job:
  stage: build
  artifacts:
    when: always
    expire_in: 1 Week  #it will hold the artifacts into only one week then after it will delete
    paths: 
      - package-lock.json
      - npm-audit.json
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean install

15-if the build will fail when the artifacts will upload in gitlab

>>No by defalut it will not upload you can enable by using this syntax
build-job:
  stage: build
  artifacts:
    when: always
    paths: 
      - package-lock.json
      - npm-audit.json
  tags: 
    - "self-hosted"
  script:
    - echo "Maven Build"
    - mvn clean install

16-how to use artifacts in feature pipelines or projects

>>
build:
  stage: build
  script:
    - echo "I am an artifact" >anji.txt
  artifacts:
    paths: 
      - artifact.*

test:
  stage: test
  dependencies:
    - build
  script: 
    - cat artifact*.*

17-

>>
 
