1-1-what is Istio

>>Istio is a "Service Mesh" this layer we can apply to Kubernetes cluster.and we can used to monitor and we can manage the  traffic that moving between the pods and secure the pods using sidercar-containers 
it act as proxy to secure the pods to run end-to-end encryption over teh pods 
>>Istio is an open source service mesh that helps organizations run distributed, microservices-based apps anywhere. 
>>Istio enables organizations to secure, connect, and monitor microservices, so they can modernize their enterprise apps more swiftly and securely.
>>it is used to connect and secure, control and oberve service
>>Another huge benefit of Istion is the default in-cluster Mutual-TLS
>>if your using Istio front your domain then internet gateway then the load balancer then the Istio ingress gateway servie with ssl and istio-ingress-pod with ssl then virtual service with ssl and your service
with ssl like nodeport then the pod with ssl this will give example only 
>>Istio In-front always Istio-gateway then the Virtual service will be there then after any service like service entry or destination rule     
>>Istio can work nodeport or CluserIp
>>virtual service after you can use the version v1 or v2 like paths based routing the service of your pods with ssl and it uses with load-balancing with pods like using round-robin  

2-Why use Istio? 

>>Istio enables organizations to secure, connect, and monitor microservices, so they can modernize their enterprise apps more swiftly and securely.
benfites:-
1-Trafic Management
>>control ingress traffic using gateway, virtual service, destination rule   
2-load-balancing
3-Service Entry 
4-Request Routing: fine-grained control of traffic bheavior with rich routing rules, retries, failovers and fault injection 
>>TLS Termination
5-canary rollouts :- you can pass like version1 weight 10% traffic go and version2 weight 90% of traffic will go like this 
6-Identify/header based routing: example if your user=anji found in path based or header baed then go the version2 or else go the version1     
7-failure recovery(delay, abort, reties, timeout) :- you can create the timeout or delays and also make retries and timeout using failure recovery  
8-mirrir live traffic:-
>>ratelimiting
>>citcuit breakers
>>control egress Trafic
9-Security:- transparent security traffic behind the firewall(Auto mutual TLS among backend service, which doubles the latency at max or max 10ms)
10-End-to-End authentication and authorization using JWT 
11-Observability

3-Explain Istio Architecture 

>>The following is an overview of the key components and their roles within the Istio architecture:

1-Data Plane:
>>Envoy Proxy: Istio uses the Envoy Proxy as its sidecar proxy within each microservice. Envoy handles the network communication between services, including routing, load balancing, and encryption.
Envoy proxy will do 
1-Traffic control 
-A different load-balancing policy to traffic for partcular subset of service instances
-Stageed rollouts with % based traffic split 
-HTTP/2 and GRPC proxies 
-IStio Resources
>>virtual service 
>>Destination rules
>>Gateways
>>Service entries
>>Sidecars 
2-Network Resilency
-Fault Injection
-Retries
-circuit breakers
-Failovers
-Health checks 
3-Security and Authentication
-Rate-limiting  
-TLS Termination
>>Ingress traffic and Egress traffic will also there in Data-Plane 
2-Control Plane: this all comes under Istiod the version After v1.5
>>control plane is going to make sure provide certicates authority for tls connection of pods. pods will use envoy proxy to talk to each other with ssl certicates 
>>Pilot: This component is responsible for configuring the Envoy proxies in the data plane. It maintains the service registry, manages routing rules, and ensures that each proxy has the appropriate configuration.
Istio's Pilot component provides dynamic configuration to the Envoy proxies, enabling features like traffic routing, load balancing, and fault tolerance.
>>Mixer: Mixer enforces access control policies, collects telemetry data (such as request/response metrics), and supports integration with various monitoring and logging solutions.
Mixer enforces access control policies, collects telemetry data, and allows integration with external monitoring and logging systems.
>>Citadel: Citadel is responsible for managing security-related tasks. It handles identity and access management, providing authentication, authorization, and encryption between services.
Citadel manages identity and security features, including mutual TLS (mTLS) encryption between services.
>>Galley: Galley validates and processes configuration files for Istio. It converts the high-level routing and security rules defined by users into configurations that can be understood by other 
components in the control plane.
Telemetry:Telemetry data is collected and can be visualized using Prometheus and Grafana, while Jaeger can be used for distributed tracing.
>>Prometheus: Istio integrates with Prometheus for collecting and storing performance and telemetry data, which can be used for monitoring and alerting.
>>Grafana: Grafana is a visualization tool often used in conjunction with Prometheus to create dashboards for monitoring service health and performance.
-Tracing:
>>Jaeger: Istio can be configured to integrate with Jaeger, which is a distributed tracing system. This allows you to trace requests as they flow through various microservices, providing insights into performance
bottlenecks and issues.
-Policy Enforcement and Security:
>>Authentication and Authorization: Istio provides strong security controls through Citadel, which allows you to define authentication and authorization policies. You can control who can access your services 
and enforce encryption between them.
-Configuration Management:
>>Custom Resource Definitions (CRDs): Istio extends Kubernetes' API with custom resource definitions to define routing, security, and other service mesh configuration policies.

4-what is Service Mesh 

>>A Service Mesh is an extra layer of software you deploy alongside your cluster(eg: Kubernetes)
>>Istio Service Mesh is a network connectivity(i.e mesh) within kubernetes cluster created by Envoy Proxy containers be it a standlone or a sidecar proxy. 
1-Traffic control:-
>>A differnet load balancing policy to traffic for a particular subset of service instaces 
>>Staged rollouts with %-based traffic split
>>HTTP/2 and gPRC proxies
>>weighted and leas request 
2-Network Resiliency
>>Timeouts
>>Retries
>>Circuit breakers 
>>Fault Injection 
3-Security Authentication
>>Rate limiting 
>>TLS Termination 

5-What is the difference between Istio and ingress?

>>Along with support for Kubernetes Ingress , Istio offers another configuration model, Istio Gateway . A Gateway provides more extensive customization and flexibility than Ingress ,
and allows Istio features such as monitoring and route rules to be applied to traffic entering the cluster

6-what is Telemetery

>>Telemetery is fancy word it is used to gathering the metrics 

7-what is Istiod

>>Istiod acts as the control plane, distributing the configuration to all sidecar proxies and gateways. It enables intelligent application-aware load balancing from the application layer to other mesh 
enabled services in the cluster and bypasses the rudimentary kube-proxy load balancing.
>>Istiod contains Pilot ,Mixer, citidel, galley  this main component in Istiod as control plane 

8-what is the purpose Istio used in Kubernetes

>>Istio makes traffic management transparent to the application, moving this functionality out of the application and into the platform layer as a cloud native infrastructure. 
Istio complements Kubernetes, by enhancing its traffic management, observability and security for cloud native applications.

9-how to enabled sidecar in Istio

>>kubectl label -n default istio-injection=enabled  ##we are enableing the istio sidecar container default namepace whenever new pod created the sidecar will create
>>istio analyze
>>kubectl describe ns default  ##it will show the label injection details 
>>peerauthentication is that you can enable or disable the mtls connection pod to pod connection or network by using peerauthentication
>>STRICT
>>DISABLE
>>PERMISSIVE

apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata: 
  name: default
  namespace: istio-system
spec:
  mtls:  ##by default automcatically came if you want disable you can create 
    mode: PERMISSIVE  #if your using permissive this any pod created in the istio-system the pod will go onto the mtls mutual-tls if you DISABLE it will go plan text 
          ##if you use the STRICT mode the communcation will stop why because the pod will not allow without tls certicates
          
>>kubectl get crd  -->it will show the peer authentication
>>kubectl edit pa -n istio-system  -->you can change the peer authentication or mtls 

10-how to set the path of istio or anywhere can access 

nano ~/.bashrc

# Add the following line to the end of the file:
export PATH=$PWD/bin:$PATH

# Save and exit the file.

# Apply the changes to your current session.
source ~/.bashrc

11-how to chnage the service from cluserIp to load-balancer or nodeport

>>kubectl get services
>>kubectl edit service your-service-name

12-what is HA-Proxy what is exactly ha-proxy will do what is HA-Proxy 

>>HAProxy, which stands for High Availability Proxy, is an open-source software solution that provides high availability, load balancing, and proxying for TCP and HTTP-based applications. 
It is widely used to ensure the availability, scalability, and reliability of web services and applications.
Here's what HAProxy does
1-Load Balancing:
2-High Availability
3-Proxying
4-Health Checks
5-Layer 4 and Layer 7 Load Balancing
6-SSL/TLS Offloading
7-Content Switching
8-Session Persistence
9-Rate Limiting
10-Logging and Monitoring:

13-which alogrthum used in ha-proxy

>>HAProxy uses several load-balancing algorithms to distribute traffic among backend servers. The choice of algorithm can significantly impact the performance and behavior of the load balancer.
HAProxy offers the following load-balancing algorithms
1-Round Robin (default):
2-Least Connections:
3-Source IP Hash:
4-URI Hash:
5-URL Parameter Hash:
6-Static-RR (Static Round Robin):
7-Least Response Time
8-Random:

14-in this which one is better 

>>it is dependencies up on the server utilization like memory ram cpu and static content like mostly round robin uses if you have 10 servers same configuartion 8gb memory example round robin
one of my vitual machine good capacity we can create weight sticy to that server sticky alogorithum 

15-what is name space in kubernetes

>>it is like divideing into one cluster to many cluster to isloate the workspace 
>>like we can create the for security namespace and database divide or isolate 

16-how to send the traffic pod-A to pod-B 

>>uisng drain or active command uisng or cordon or uncordon 

17-what is the meaning of beta and stable

>>beta means testing
>>stable means release

18-what is Envoy proxy

>>ENVOY is and opensource edge and service proxy designed for cloud native applications 
>>Envoy proxy is a high-performance proxy developed in C++ to mediate all inbound and outbound traffic for all servicesin the service mesh. envoy proxies are the only Istion complements that are interact 
with data plane traffic   
features of ENVOY:-
1-Traffic control 
-A different load-balancing policy to traffic for partcular subset of service instances
-Stageed rollouts with % based traffic split 
-HTTP/2 and GRPC proxies 
-IStio Resources
>>virtual service 
>>Destination rules
>>Gateways
>>Service entries
>>Sidecars 

2-Network Resilency
-Fault Injection
-Retries
-circuit breakers
-Failovers
-Health checks 

3-Security and Authentication
-Rate-limiting  
-TLS Termination

19-why not use envoy instead of Istio

>>Envoy and Istio serve complementary but different purposes in the world of microservices and service mesh architectures. Envoy is a high-performance proxy designed for network communication and is often
used as the data plane component within service mesh architectures. Istio, on the other hand, is a comprehensive service mesh platform that includes Envoy proxies but also offers a control plane for 
managing and securing microservices.
>>Envoy proxy is capable of being deployed into many different types of clusters that means it has a massive and complex terminology of its own  

Reasons:-
1-Higher-Level Abstractions:-Istio provides a layer of higher-level abstractions, making it easier to manage and secure microservices. It includes features like traffic management, load balancing, security, 
telemetry, and policy enforcement, all managed through a central control plane. This simplifies the configuration and management of complex microservices environments.
2-Security and Observability:-Istio offers robust security features, such as mutual TLS (mTLS) authentication, rate limiting, and access control policies. It also integrates with various observability tools,
including Prometheus and Grafana, to provide insights into service behavior.
3-Consistent and Secure Traffic Management:-Istio abstracts the complexities of traffic management. You can define routing rules, canary deployments, and retries using Istio's high-level configuration 
rather than configuring individual proxies manually. It provides a consistent way to manage traffic across multiple services
4-Multi-Cluster and Multi-Cloud Support:-Istio is designed to work across multiple clusters and cloud environments, providing a consistent way to manage services, regardless of where they are hosted. 
It can be a valuable tool for organizations with hybrid or multi-cloud deployments.
5-Service Mesh Ecosystem:-Istio has a growing ecosystem of plugins, extensions, and integrations that build upon its functionality. This includes tools for canary releases, fault injection, chaos testing,
and more.
6-End-User and Developer Friendliness:-Istio's higher-level abstractions make it more user-friendly for developers and operators. It provides a simpler interface for configuring and managing traffic, security,
and observability without requiring in-depth knowledge of Envoy proxy configuration.
7-Community and Support:-Istio has a vibrant open-source community and is backed by major organizations, including Google, IBM, and Red Hat. This provides a level of support and development resources that 
may be challenging to replicate when using Envoy directly.

20-what is the difference between virtual service and gateway in istio

In Istio, both VirtualServices and Gateways are important resources used for managing and controlling traffic within a service mesh, but they serve different purposes. Here's a breakdown of the differences 
between VirtualServices and Gateways:

VirtualService:
>>Purpose: Virtual services are primarily used for controlling the routing and traffic behavior within the service mesh. They define how incoming requests to a specific host should be routed to different
services or subsets, and they specify rules for handling those requests.
>>Host Matching: Virtual Services are often used for specifying rules based on the host or URL path. You can define different routing behaviors for requests to different hosts or paths, making them ideal for service-to-service 
communication within the mesh.
Layer 7 (Application Layer) Routing:

VirtualServices are more focused on Layer 7 (application layer) routing. They can be used to implement features like request rewriting, request/response timeouts, retries, and load balancing strategies. They work with HTTP, gRPC, and other application-layer protocols.
Service Discovery:

VirtualServices rely on the service discovery mechanisms within Istio to route traffic to services registered in the service mesh. They allow you to specify routing based on service names and labels.
Internal Routing:

VirtualServices are often used for routing traffic between services within the service mesh, controlling how traffic flows between different services, versions, or subsets.
Gateway:
Purpose:

Gateways are used to manage and control the entry and exit points of traffic into and out of the service mesh. They define how traffic from outside the mesh should be routed to services within the mesh or vice versa. Gateways are the entry points for external traffic.
Host Matching:

Gateways are used to specify rules based on hosts, but their primary purpose is to route incoming traffic from the internet or other external sources to services within the mesh.
Layer 4 (Transport Layer) Routing:

Gateways are more focused on Layer 4 (transport layer) routing. They can be used to route traffic based on ports and protocols, making them suitable for handling raw TCP or UDP traffic in addition to HTTP and HTTPS.
External Traffic:

Gateways handle traffic that originates from outside the service mesh. They are typically associated with a public IP address or a domain name and are responsible for forwarding external traffic to services within the mesh.
Ingress and Egress:

Gateways are commonly used for configuring ingress (incoming traffic from external sources) and egress (outgoing traffic to external destinations) traffic control. They allow you to manage how external clients access services inside the mesh and how services in the mesh access external resources.
